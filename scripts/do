#!/usr/bin/env bash

set -e -o pipefail

DOCKER=$(command -v docker)
IMAGE="hello-world"

HOST="${LISTEN_HOST:-0.0.0.0}"
PORT="${LISTEN_PORT:-8080}"
WORK_DIR="/app"

function build() {
  ${DOCKER} build -t ${IMAGE} .
}

function run() {
  "${DOCKER}" run --rm --init -d -p "${PORT}:${PORT}" -w "${WORK_DIR}" \
    -e NODE_ENV="development" \
    -e LISTEN_HOST="${HOST}" \
    -e LISTEN_PORT="${PORT}" \
    --name ${IMAGE} ${IMAGE}
}

function stop() {
  ID=$(${DOCKER} ps | awk "/${IMAGE}/ {print \$1}")
  "${DOCKER}" stop "${ID}"
}

function push() {
  if [[ ! -f "./terraform/${ENVIRONMENT}.repo" ]]; then
    echo "Can't find ${ENVIRONMENT}.repo..."
    echo "Run from project root, and ensure ./terraform/${ENVIRONMENT}.repo exists."
    exit 1
  fi
  ECR_REPO=$(cat "./terraform/${ENVIRONMENT}.repo")
  aws --profile="${AWS_PROFILE}" ecr get-login-password --region "${AWS_DEFAULT_REGION}" | \
  docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
  docker tag "${IMAGE}:latest" "${ECR_REPO}:latest"
  docker push "${ECR_REPO}:latest"
  aws --profile="${AWS_PROFILE}" ecs update-service \
    --cluster "${IMAGE}-${ENVIRONMENT}" \
    --service "${IMAGE}-${ENVIRONMENT}" \
    --force-new-deployment
}

case "$1" in
  build)
    build
    ;;
  run|start)
    run
    ;;
  stop)
    stop
    ;;
  restart)
    stop && run
    ;;
  push)
    ENVIRONMENT="${2?Must provide environment name to push}"
    build && push "$ENVIRONMENT"
    ;;
  *)
    echo "USAGE: $(basename $0) build|start|stop|restart|push"
    exit 1
    ;;
esac

exit $?
